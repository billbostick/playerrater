<?php

function playerrater_fantasy_rankings() {
  $players = array();
  $playerindex = 0;
  $baseurl = 'http://games.espn.go.com/fba/playerrater'; 
  $url = $baseurl;
  do {
    $playercount = playerrater_get_rankings($url, $players);
    $playerindex += $playercount;
    $url = $baseurl . '?startIndex=' . $playerindex;
  } while ($playercount != 0);
  $header = array('Rank', 'Player', 'FG%', 'FT%', '3PM', 'Reb', 'Ast', 'Stl', 'Blk', 'Pts', 'Score' );
  $output = theme('table', $header, $players);
  return $output;
}

function playerrater_get_rankings($url, &$rows) {
  $xml = simple_get_xml($url);
  $block = $xml->xpath('//table[@id="playertable_0"]');
  $rowcount = 0;
 
  foreach ($block[0]->tr as $item) {
  if ($item->td[1]['class'] == 'playertablePlayerName') {
    $row = array();
    $row[] = (string)$item->td[0]; /* rank */
    $row[] = (string)$item->td[1]->a[0]; /* player name */
    $row[] = (string)$item->td[3]; /* FG% */
    $row[] = (string)$item->td[4]; /* FT% */
    $row[] = (string)$item->td[5]; /* 3PM */
    $row[] = (string)$item->td[6]; /* REB */
    $row[] = (string)$item->td[7]; /* AST */
    $row[] = (string)$item->td[8]; /* STL */
    $row[] = (string)$item->td[9]; /* BLK */
    $row[] = (string)$item->td[10]; /* PTS */
    $row[] = (string)$item->td[12]; /* Score */
    $rows[] = $row;
    $rowcount++;
    }
  }

# print '<pre>'; print_r($block); print '</pre>';

  return $rowcount;
}

function playerrater_espn_rankings_import(&$players) {
  $playerindex = 0;
  $baseurl = 'http://games.espn.go.com/fba/playerrater'; 
  $url = $baseurl;
  do {
    $playercount = playerrater_espn_import_page($url, $players);
    $playerindex += $playercount;
    $url = $baseurl . '?startIndex=' . $playerindex;
  } while ($playercount != 0);

  return $playerindex;
}


function playerrater_fantasy_import() {
  $players = array();
  $playerindex = 0;
  $baseurl = 'http://games.espn.go.com/fba/playerrater'; 
  $url = $baseurl;
  do {
    $playercount = playerrater_import_rankings($url, $players);
    $playerindex += $playercount;
    $url = $baseurl . '?startIndex=' . $playerindex;
  } while ($playercount != 0);

  $output = (string)$playerindex . ' Players imported.';

  return $output;
}

function playerrater_import_rankings($url, &$rows) {
  $xml = simple_get_xml($url);
  $block = $xml->xpath('//table[@id="playertable_0"]');
  $rowcount = 0;
 
  foreach ($block[0]->tr as $item) {
  if ($item->td[1]['class'] == 'playertablePlayerName') {

    $node = new stdClass();
    $node->name = (string)$item->td[1]->a[0]; 
    $node->title = $node->name;
    $node->type = 'player';
    $node->created = time();
    $node->changed = $node->created;
    $node->status = 1;
    $node->sticky = 0;
    $node->promote = 0;
    $node->language = 'en';

    $node->ranking = (string)$item->td[0]; /* rank */
    $node->name = (string)$item->td[1]->a[0]; /* player name */
    $node->fgp = (string)$item->td[3]; /* FG% */
    $node->ftp = (string)$item->td[4]; /* FT% */
    $node->tpm = (string)$item->td[5]; /* 3PM */
    $node->reb = (string)$item->td[6]; /* REB */
    $node->ast = (string)$item->td[7]; /* AST */
    $node->stl = (string)$item->td[8]; /* STL */
    $node->blk = (string)$item->td[9]; /* BLK */
    $node->pts = (string)$item->td[10]; /* PTS */
    $node->score = (string)$item->td[12]; /* Score */

    if ($node = node_submit($node)) {
      node_save($node);
    }
    else {
      drupal_set_message(t("Node " . $node->title . " import failed"));
    }


    $rowcount++;
    }
  }

# print '<pre>'; print_r($block); print '</pre>';

  return $rowcount;
}

function
simple_get_xml($url) {
  $html = new DOMDocument();
  // fetch espn HTML and parse it (@ suppresses warnings).
  @$html->loadHTMLFile($url);
  // convert DOM to SimpleXML
  $xml = simplexml_import_dom($html);  
  return $xml; 
}

function playerrater_menu() {
  $items = array();
  $items['playerrater'] = array(
    'title' => t('ESPN Player Rater'),
    'page callback' => 'playerrater_fantasy_rankings',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM
  );
  $items['playerrater/import'] = array(
    'title' => t('ESPN Player Importer'),
    'page callback' => 'playerrater_fantasy_import',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM
  );
  $items['newexample'] = array(
    'title' => 'New Import',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('playerrater_update_players_form'),
    'access callback' => TRUE,
  );
  $items['batch_example'] = array(
    'title' => 'Batch example',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('playerrater_simple_form'),
    'access callback' => TRUE,
  );
  $items['batch_example/example_1'] = array(
    'title' => 'Simple form',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  $items['batch_example/example_2'] = array(
    'title' => 'Multistep form',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('playerrater_multistep_form'),
    'access callback' => TRUE,
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );
  $items['batch_example/example_3'] = array(
    'title' => 'No form',
    'page callback' => 'playerrater_page',
    'access callback' => TRUE,
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );

  return $items;
}

function playerrater_node_info() {
  return array(
    'player' => array(
      'name' => t('Player'),
      'module' => 'playerrater',
      'description' => t("An Player with associated ESPN player ratings."),
      'has_title' => TRUE,
      'title_label' => t('Name'),
      'has_body' => FALSE,
      /* 'body_label' => t('Example Node Type 1 Body'), */
    )
  );
}

function playerrater_access($op, $node, $account) {
  if ($op == 'create') {
    return user_access('create player content', $account);
  }

  if ($op == 'update') {
    if (user_access('edit any player content', $account) || (user_access('edit own player content', $account) && ($account->uid == $node->uid))) {
      return TRUE;
    }
  }

  if ($op == 'delete') {
    if (user_access('delete any player content', $account) || (user_access('delete own player content', $account) && ($account->uid == $node->uid))) {
      return TRUE;
    }
  }
}

function playerrater_perm() {
  return array(
    'create player content',
    'delete own player content',
    'delete any player content',
    'edit own player content',
    'edit any player content',
  );
}

function playerrater_form(&$node, $form_state) {
  $type = node_get_types('type', $node);

  if ($type->has_title) {
    $form['title'] = array(
      '#type' => 'textfield',
      '#title' => check_plain($type->title_label),
      '#required' => TRUE,
      '#default_value' => $node->title,
      '#weight' => -5
    );
  }

  if ($type->has_body) {
    $form['body_field'] = node_body_field($node, $type->body_label, $type->min_word_count);
  }

  $form['ranking'] = array(
    '#type' => 'textfield',
    '#title' => t('Ranking'),
    '#default_value' => isset($node->ranking) ? $node->ranking : 0,
    '#size' => 10,
    '#maxlength' => 10
  );
  $form['fgp'] = array(
    '#type' => 'textfield',
    '#title' => t('Field Goal Percentage'),
    '#default_value' => isset($node->fgp) ? $node->fgp : 0,
    '#size' => 10,
    '#maxlength' => 10
  );
  $form['ftp'] = array(
    '#type' => 'textfield',
    '#title' => t('Free Throw Percentage'),
    '#default_value' => isset($node->ftp) ? $node->ftp : 0,
    '#size' => 10,
    '#maxlength' => 10
  );
  $form['tpm'] = array(
    '#type' => 'textfield',
    '#title' => t('3 Pointers Made'),
    '#default_value' => isset($node->tpm) ? $node->tpm : 0,
    '#size' => 10,
    '#maxlength' => 10
  );
  $form['reb'] = array(
    '#type' => 'textfield',
    '#title' => t('Rebounds'),
    '#default_value' => isset($node->reb) ? $node->reb : 0,
    '#size' => 10,
    '#maxlength' => 10
  );
  $form['ast'] = array(
    '#type' => 'textfield',
    '#title' => t('Assists'),
    '#default_value' => isset($node->ast) ? $node->ast : 0,
    '#size' => 10,
    '#maxlength' => 10
  );
  $form['stl'] = array(
    '#type' => 'textfield',
    '#title' => t('Steals'),
    '#default_value' => isset($node->stl) ? $node->stl : 0,
    '#size' => 10,
    '#maxlength' => 10
  );
  $form['blk'] = array(
    '#type' => 'textfield',
    '#title' => t('Blocks'),
    '#default_value' => isset($node->blk) ? $node->blk : 0,
    '#size' => 10,
    '#maxlength' => 10
  );
  $form['pts'] = array(
    '#type' => 'textfield',
    '#title' => t('Points'),
    '#default_value' => isset($node->pts) ? $node->pts : 0,
    '#size' => 10,
    '#maxlength' => 10
  );
  $form['score'] = array(
    '#type' => 'textfield',
    '#title' => t('Score'),
    '#default_value' => isset($node->score) ? $node->score : 0,
    '#size' => 10,
    '#maxlength' => 10
  );
  return $form;
}

/**
 * Implementation of hook_validate().
 *
 * Our "quantity" field requires a number to be entered. This hook lets
 * us ensure that the user entered an appropriate value before we try
 * inserting anything into the database.
 *
 * Errors should be signaled with form_set_error().
 */
function playerrater_validate($node, &$form) {
  if ($node->fgp) {
    if (!is_numeric($node->fgp)) {
      form_set_error('fgp', t('The Field Goal Percentage must be a number.'));
    }
  }
}

/**
 * Implementation of hook_insert().
 *
 * As a new node is being inserted into the database, we need to do our own
 * database inserts.
 */
function playerrater_insert($node) {
  db_query("INSERT INTO {playerrater} (vid, nid, ranking, fgp, ftp, tpm, reb, ast, stl, blk, pts, score) VALUES (%d, %d,  %d, %f, %f, %f, %f, %f, %f, %f, %f, %f)", $node->vid, $node->nid, $node->ranking, $node->fgp, $node->ftp, $node->tpm, $node->reb, $node->ast, $node->stl, $node->blk, $node->pts, $node->score );
}

/**
 * Implementation of hook_update().
 *
 * As an existing node is being updated in the database, we need to do our own
 * database updates.
 */
function playerrater_update($node) {
  // if this is a new node or we're adding a new revision,
  if ($node->revision) {
    node_example_insert($node);
  }
  else {
    db_query("UPDATE {playerrater} SET ranking = %d, fgp = %f, ftp = %f, tpm = %f, reb = %f, ast = %f, stl = %f, blk = %f, pts = %f, score = %f WHERE vid = %d", $node->ranking, $node->fgp, $node->ftp, $node->tpm, $node->reb, $node->ast, $node->stl, $node->blk, $node->pts, $node->score, $node->vid);
  }
}

/**
 * Implementation of hook_nodeapi().
 *
 * When a node revision is deleted, we need to remove the corresponding record
 * from our table. The only way to handle revision deletion is by implementing
 * hook_nodeapi().
 */
function playerrater_nodeapi(&$node, $op, $teaser, $page) {
  switch ($op) {
    case 'delete revision':
      // Notice that we're matching a single revision based on the node's vid.
      db_query('DELETE FROM {playerrater} WHERE vid = %d', $node->vid);
      break;
  }
}

/**
 * Implementation of hook_delete().
 *
 * When a node is deleted, we need to remove all related records from our table.
 */
function playerrater_delete($node) {
  // Notice that we're matching all revision, by using the node's nid.
  db_query('DELETE FROM {playerrater} WHERE nid = %d', $node->nid);
}

/**
 * Implementation of hook_load().
 *
 * Now that we've defined how to manage the node data in the database, we
 * need to tell Drupal how to get the node back out. This hook is called
 * every time a node is loaded, and allows us to do some loading of our own.
 */
function playerrater_load($node) {
  $additions = db_fetch_object(db_query('SELECT ranking, fgp, ftp, tpm, reb, ast, stl, blk, pts, score FROM {playerrater} WHERE vid = %d', $node->vid));
  return $additions;
}

/**
 * Implementation of hook_view().
 *
 * This is a typical implementation that simply runs the node text through
 * the output filters.
 */
function playerrater_view($node, $teaser = FALSE, $page = FALSE) {
  $node = node_prepare($node, $teaser);
  $node->content['myfield'] = array(
    '#value' => theme('playerrater_order_info', $node),
    '#weight' => 1,
  );

  return $node;
}

/**
 * Implementation of hook_theme().
 *
 * This lets us tell Drupal about our theme functions and their arguments.
 */
function playerrater_theme() {
  return array(
    'playerrater_order_info' => array(
      'arguments' => array('node'),
    ),
  );
}

/**
 * A custom theme function.
 *
 * By using this function to format our node-specific information, themes
 * can override this presentation if they wish. We also wrap the default
 * presentation in a CSS class that is prefixed by the module name. This
 * way, style sheets can modify the output without requiring theme code.
 */
function theme_playerrater_order_info($node) {
  $output = '<div class="playerrater_order_info">';
  $output .= t('Name: %playername', array('%playername' => check_plain($node->title))) . '<br />';
  $output .= t('%ranking %fgp %ftp %tpm %reb %ast %stl %blk %pts %score', array(
    '%ranking' => check_plain($node->ranking),
    '%fgp' => check_plain($node->fgp),
    '%ftp' => check_plain($node->ftp),
    '%tpm' => check_plain($node->tpm),
    '%reb' => check_plain($node->reb),
    '%ast' => check_plain($node->ast),
    '%stl' => check_plain($node->stl),
    '%blk' => check_plain($node->blk),
    '%pts' => check_plain($node->pts),
    '%score' => check_plain($node->score))) . '<br />';

  $output .= '</div>';
  return $output;
}

function playerrater_views_api() {
  // Note that you can include 'path' in this array so that your views.inc 
  // file can be stored in a different location.
  return array(
    'api' => 2.0
  );
}

function playerrater_update_players_form() {
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Import from ESPN',
  );
  return $form;
}

function playerrater_update_players_form_submit($form, &$form_state) {
  $values =& $form_state['values'];
  $function = 'playerrater_batch_import';
  $batch = $function();
  batch_set($batch);
  $form_state['redirect'] = 'players';
}

function playerrater_batch_import() {

  $operations = array();
  $operations[] = array('playerrater_batch_import_op');
  $batch = array(
    'operations' => $operations,
    'finished' => 'playerrater_finished',
  );
  return $batch;
}

function playerrater_batch_import_op(&$context) {

  playerrater_fantasy_import();
  // Optional message displayed under the progressbar.
  $context['message'] = t('Importing...');
}


/* bacth stuff */

/**
 * Test 1 :
 * Simple form
 */
function playerrater_simple_form() {
  $form['batch'] = array(
    '#type' => 'select',
    '#title' => 'Choose batch',
    '#options' => array(
      'batch_1' => 'batch 1 - load a node 100 times',
      'batch_2' => 'batch 2 - load all nodes, 20 times')
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Go',
  );

  return $form;
}

function playerrater_simple_form_submit($form, &$form_state) {
  $values =& $form_state['values'];

  $function = 'playerrater_' . $values['batch'];
  $batch = $function();
  batch_set($batch);

  // Redirection takes place as usual.
  $form_state['redirect'] = 'batch_example/example_2';
}

/**
 * Multistep form
 */
function playerrater_multistep_form($form_state = NULL) {
  $step = isset($form_state['storage']['step']) ? $form_state['storage']['step'] : 1;

  $form['step_display'] = array(
    '#type' => 'item',
    '#value' => 'step ' . $step,
  );

  if ($step < 3) {
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => 'Go',
    );
  }

  return $form;
}

function playerrater_multistep_form_submit($form, &$form_state) {
  $step = isset($form_state['storage']['step']) ? $form_state['storage']['step'] : 1;

  switch ($step) {
    case 1:
      drupal_set_message('step 1 submitted');
      batch_set(playerrater_batch_1());
      break;
    case 2:
      drupal_set_message('step 2 submitted');
      batch_set(playerrater_batch_2());
      // this does not seem to work ?
      $form_state['redirect'] = 'batch_example/example_3';
      break;
  }

  $form_state['storage']['step'] = $step + 1;
}

function playerrater_page() {
  batch_set(playerrater_batch_1());

  // We're not inside a form submission workflow, so we have to manually
  // trigger the batch processing - this issues a drupal_goto and thus ends
  // current request.
  // We also specify here where we want to redirect after batch processing.
  batch_process('batch_example/example_1');
}

/**
 * @defgroup batch_definitions Example batch definitions
 * @{
 * Definitions of the batches used in this module.
 */

/**
 * Batch 1 : Load 100 times the node with the lowest nid
 */
function playerrater_batch_1() {
  $nid = db_result(db_query_range("SELECT nid FROM {node} ORDER BY nid ASC", 0, 1));

  $operations = array();
  for ($i = 0; $i<100; $i++) {
    $operations[] = array('playerrater_op_1', array($nid));
  }
  $batch = array(
    'operations' => $operations,
    'finished' => 'playerrater_finished',
  );
  return $batch;
}

/**
 * Batch operation for batch 1 : lode a node...
 */
function playerrater_op_1($nid, &$context) {
  $node = node_load($nid, NULL, TRUE);

  // Store some result for post-processing in the finished callback.
  $context['results'][] = $node->nid . ' : ' . check_plain($node->title);

  // Optional message displayed under the progressbar.
  $context['message'] = t('Loading @title', array('@title' => $node->title));
}

/**
 * Batch 2 : load all nodes 5 by 5, 20 times (Multipart operation)
 */
function playerrater_batch_2() {
  $operations = array();
  for ($i = 0; $i<20; $i++) {
    $operations[] = array('playerrater_op_2', array());
  }
  $batch = array(
    'operations' => $operations,
    'finished' => 'playerrater_finished',
    // We can define custom messages instead of the default ones.
    'title' => t('Processing batch 2'),
    'init_message' => t('Batch 2 is starting.'),
    'progress_message' => t('Processed @current out of @total.'),
    'error_message' => t('Batch 2 has encountered an error.'),
  );
  return $batch;
}

/**
 * Batch operation for batch 2 : load all nodes, 5 by five
 * This is a multipart operation, using the
 */
function playerrater_op_2(&$context) {
  // Use the $context['sandbox'] at your convenience to store the
  // information needed to track progression between successive calls.
  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['current_node'] = 0;
    $context['sandbox']['max'] = db_result(db_query('SELECT COUNT(DISTINCT nid) FROM {node}'));
  }

  // Process nodes by groups of 5 (arbitrary value).
  // When a group of five is processed, the batch update engine determines
  // whether it should continue processing in the same request or provide
  // progress feedback to the user and wait for the next request.
  $limit = 5;

  // Retrieve the next group of nids.
  $result = db_query_range("SELECT nid FROM {node} WHERE nid > %d ORDER BY nid ASC", $context['sandbox']['current_node'], 0, $limit);
  while ($row = db_fetch_array($result)) {
    // Here we actually perform our dummy 'processing' on the current node.
    $node = node_load($row['nid'], NULL, TRUE);

    // Store some result for post-processing in the finished callback.
    $context['results'][] = $node->nid . ' : ' . check_plain($node->title);

    // Update our progress information.
    $context['sandbox']['progress']++;
    $context['sandbox']['current_node'] = $node->nid;
    $context['message'] = check_plain($node->title);
  }

  // Inform the batch engine that we are not finished,
  // and provide an estimation of the completion level we reached.
  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
}

/**
 * Batch 'finished' callback used by both batch 1 and batch 2
 */
function playerrater_finished($success, $results, $operations) {
  if ($success) {
    // Here we could do something meaningful with the results.
    // We just display the number of nodes we processed...
    $message = count($results) . ' processed.';
  }
  else {
    // An error occurred.
    // $operations contains the operations that remained unprocessed.
    $error_operation = reset($operations);
    $message = 'An error occurred while processing ' . $error_operation[0] . ' with arguments :' . print_r($error_operation[0], TRUE);
    drupal_set_message($message);
  }
# drupal_set_message($message);
}

/**
 * @} End of "defgroup batch_definitions".
 */

